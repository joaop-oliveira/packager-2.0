{"version":3,"sources":["webpack:///./src/lib/index.js"],"names":["data","Package","create","pack","Error","insertPackageData","find","sort","created_at","select","lastVersion","checkVersion","shell","require","zlib","fs","moment","fstream","tar","gzip","createGzip","currentDate","format","MEMOIZE","currentVersion","createPackage","inputPath","req","res","body","location","packageDir","version","exec","__dirname","code","status","send","message","e","console","log","buildGzip","inputFile","bigFile","createReadStream","mkdir","gzipedFile","createWriteStream","pipe"],"mappings":"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","file":"0.6967e899dfa7c18f2409.hot-update.js","sourcesContent":["//import statements\nimport Package from '../models/package.model';\nconst shell = require('shelljs');\nconst zlib = require('zlib');\nconst fs = require('fs');\nconst moment = require('moment');\nconst fstream = require('fstream');\nconst tar = require('tar');\n//declare statements\nconst gzip = zlib.createGzip();\nconst currentDate = moment().format('DD-MM-YYYY');\n\nconst MEMOIZE = {\n  currentVersion: null\n};\n\nasync function insertPackageData(data) {\n    const pack = await Package.create(data);\n    if (!pack) throw new Error(pack);\n}\n\nexport const createPackage = (inputPath, req, res) => {\n  req.body.location = `./package/${currentDate}/package-2.0.0`;\n  // const zipDir = `zip -r -9 $(pwd)/packages/${currentDate}/package-${req.body.version}.zip . -i  $(pwd)${inputPath}`;\n  const packageDir = `/packages/${currentDate}/package-${req.body.version}.zip`;\n  try{\n      insertPackageData(req.body);\n      \n      if (shell.exec(`zip -r -9 ./${__dirname}/packages/${currentDate}/package-${req.body.version}.zip  ./${__dirname}${inputPath}`).code === 0) {\n          res.status(200).send({\n              message: `Pacakage created successfully within ${__dirname}${packageDir}` });\n      } else{\n          res.send({\n              message: \"could not compress the directory\"\n          });\n      }\n  } catch(e) {\n      console.log(e);\n  }\n};\n\nasync function checkVersion() {\n  const lastVersion = await Package.find({})\n    .sort({ created_at: 'desc' })\n    .select('version');\n  if (!lastVersion) throw new Error(lastVersion);\n  return lastVersion;\n}\n\nexport const buildGzip = async (inputFile, req, res) => {\n  // if (MEMOIZE.currentVersion === null) {\n  //   // const nextVersion = checkVersion();\n  // }\n  const bigFile = fs.createReadStream(__dirname + inputFile);\n  shell.mkdir('-p', `./packages/${currentDate}`);\n  const gzipedFile = fs.createWriteStream(`./packages/${currentDate}/package-${req.body.version}.gz`);\n  bigFile.pipe(gzip).pipe(gzipedFile);\n  res.send({ message: 'file created' });\n};\n\n// function createFile(fileName) {\n//   fs.appendFile(fileName, content, function(err) {\n//     if (err) throw new Error(err);\n//     console.log('file saved!!');\n//   });\n// }\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/index.js"],"sourceRoot":""}